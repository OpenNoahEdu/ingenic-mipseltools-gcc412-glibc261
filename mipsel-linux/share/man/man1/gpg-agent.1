.TH GPG-AGENT 1 2008-12-03 "GnuPG 2.0.9" "GNU Privacy Guard"
.SH NAME
.B gpg-agent
\- Secret key management for GnuPG
.SH SYNOPSIS
.B  gpg-agent
.RB [ \-\-homedir
.IR dir ]
.RB [ \-\-options
.IR file ]
.RI [ options ]  
.br
.B  gpg-agent
.RB [ \-\-homedir
.IR dir ]
.RB [ \-\-options
.IR file ]
.RI [ options ]  
.B  \-\-server 
.br
.B  gpg-agent
.RB [ \-\-homedir
.IR dir ]
.RB [ \-\-options
.IR file ]
.RI [ options ]  
.B  \-\-daemon 
.RI [ command_line ]

.SH DESCRIPTION
\fBgpg-agent\fR is a daemon to manage secret (private) keys
independently from any protocol.  It is used as a backend for
\fBgpg\fR and \fBgpgsm\fR as well as for a couple of other
utilities.


The usual way to run the agent is from the \fB~/.xsession\fR file:

.RS 2
.nf
eval `gpg-agent --daemon`
.fi
.RE


If you don't use an X server, you can also put this into your regular
startup file \fB~/.profile\fR or \fB.bash_profile\fR.  It is best not
to run multiple instance of the \fBgpg-agent\fR, so you should make
sure that only one is running: \fBgpg-agent\fR uses an environment
variable to inform clients about the communication parameters. You can
write the content of this environment variable to a file so that you can
test for a running agent.  This short script may do the job:

.RS 2
.nf
if test -f $HOME/.gpg-agent-info && \
   kill -0 `cut -d: -f 2 $HOME/.gpg-agent-info` 2>/dev/null; then
     GPG_AGENT_INFO=`cat $HOME/.gpg-agent-info`
     export GPG_AGENT_INFO   
else
     eval `gpg-agent --daemon`
     echo $GPG_AGENT_INFO >$HOME/.gpg-agent-info
fi
.fi
.RE


Note that the new option \fB--write-env-file\fR may be used instead.
 


You should always add the following lines to your \fB.bashrc\fR or
whatever initialization file is used for all shell invocations:

.RS 2
.nf
GPG_TTY=`tty`
export GPG_TTY
.fi
.RE


It is important that this environment variable always reflects the
output of the \fBtty\fR command.  For W32 systems this option is not
required.

Please make sure that a proper pinentry program has been installed
under the default filename (which is system dependant) or use the
option \fBpinentry-program\fR to specify the full name of that program.
It is often useful to install a symbolic link from the actual used
pinentry (e.g. `\fI/usr/bin/pinentry-gtk\fR') to the expected
one (e.g. `\fI/usr/bin/pinentry\fR').



.SH COMMANDS

Commands are not distinguished from options except for the fact that
only one command is allowed.

.TP
.B  --version
Print the program version and licensing information.  Not that you can
abbreviate this command.

.TP
.B  --help
.TP
.B  -h
Print a usage message summarizing the most useful command-line options.
Not that you can abbreviate this command.

.TP
.B  --dump-options
Print a list of all available options and commands.  Not that you can
abbreviate this command.

.TP
.B  --server
Run in server mode and wait for commands on the \fBstdin\fR.  The
default mode is to create a socket and listen for commands there.

.TP
.B  --daemon [\fIcommand line\fR]
Run the program in the background.  This option is required to prevent
it from being accidently running in the background.  A common way to do
this is:
.RS 2
.nf
.fi
.RE
$ eval `gpg-agent --daemon`


.SH OPTIONS



.TP
.B  --options \fIfile\fR
Reads configuration from \fIfile\fR instead of from the default
per-user configuration file.  The default configuration file is named
`\fIgpg-agent.conf\fR' and expected in the `\fI.gnupg\fR' directory directly
below the home directory of the user.


.TP
.B  --homedir \fIdir\fR
Set the name of the home directory to \fIdir\fR. If his option is not
used, the home directory defaults to `\fI~/.gnupg\fR'.  It is only
recognized when given on the command line.  It also overrides any home
directory stated through the environment variable `\fIGNUPGHOME\fR' or
(on W32 systems) by means on the Registry entry
\fIHKCU\\Software\\GNU\\GnuPG:HomeDir\fR.


.TP
.B  -v
.TP
.B  --verbose
Outputs additional information while running.
You can increase the verbosity by giving several
verbose commands to \fBgpgsm\fR, such as '-vv'.

.TP
.B  -q
.TP
.B  --quiet
Try to be as quiet as possible.

.TP
.B  --batch
Don't invoke a pinentry or do any other thing requiring human interaction.

.TP
.B  --faked-system-time \fIepoch\fR
This option is only useful for testing; it sets the system time back or
forth to \fIepoch\fR which is the number of seconds elapsed since the year
1970.

.TP
.B  --debug-level \fIlevel\fR
Select the debug level for investigating problems. \fIlevel\fR may be
one of:

   .RS
   .TP
.B  none
   no debugging at all.
   .TP
.B  basic  
   some basic debug messages
   .TP
.B  advanced
   more verbose debug messages
   .TP
.B  expert
   even more detailed messages
   .TP
.B  guru
   all of the debug messages you can get
   .RE

How these messages are mapped to the actual debugging flags is not
specified and may change with newer releases of this program. They are
however carefully selected to best aid in debugging.

.TP
.B  --debug \fIflags\fR
This option is only useful for debugging and the behaviour may change at
any time without notice.  FLAGS are bit encoded and may be given in
usual C-Syntax. The currently defined bits are:

.RS
.TP
.B  0  (1)
X.509 or OpenPGP protocol related data
.TP
.B  1  (2)  
values of big number integers 
.TP
.B  2  (4)
low level crypto operations
.TP
.B  5  (32)
memory allocation
.TP
.B  6  (64)
caching
.TP
.B  7  (128)
show memory statistics.
.TP
.B  9  (512)
write hashed data to files named \fBdbgmd-000*\fR
.TP
.B  10 (1024)
trace Assuan protocol
.TP
.B  12 (4096)
bypass all certificate validation
.RE

.TP
.B  --debug-all
Same as \fB--debug=0xffffffff\fR

.TP
.B  --debug-wait \fIn\fR
When running in server mode, wait \fIn\fR seconds before entering the
actual processing loop and print the pid.  This gives time to attach a
debugger.

.TP
.B  --no-detach
Don't detach the process from the console.  This is mainly useful for
debugging.

.TP
.B  -s
.TP
.B  --sh
.TP
.B  -c
.TP
.B  --csh
Format the info output in daemon mode for use with the standard Bourne
shell or the C-shell respectively.  The default is to guess it based on
the environment variable \fBSHELL\fR which is correct in almost all
cases.

.TP
.B  --write-env-file \fIfile\fR
Often it is required to connect to the agent from a process not being an
inferior of \fBgpg-agent\fR and thus the environment variable with
the socket name is not available.  To help setting up those variables in
other sessions, this option may be used to write the information into
\fIfile\fR.  If \fIfile\fR is not specified the default name
`\fI${HOME}/.gpg-agent-info\fR' will be used.  The format is suitable
to be evaluated by a Bourne shell like in this simple example:

.RS 2
.nf
eval `cat \fIfile\fR`
eval `cut -d= -f 1 < \fIfile\fR | xargs echo export`
.fi
.RE



.TP
.B  --no-grab
Tell the pinentry not to grab the keyboard and mouse.  This option
should in general not be used to avoid X-sniffing attacks.

.TP
.B  --log-file \fIfile\fR
Append all logging output to \fIfile\fR.  This is very helpful in
seeing what the agent actually does.


.TP
.B  --allow-mark-trusted
Allow clients to mark keys as trusted, i.e. put them into the
`\fItrustlist.txt\fR' file.  This is by default not allowed to make it
harder for users to inadvertently accept Root-CA keys.

.TP
.B  --ignore-cache-for-signing
This option will let \fBgpg-agent\fR bypass the passphrase cache for all
signing operation.  Note that there is also a per-session option to
control this behaviour but this command line option takes precedence.

.TP
.B  --default-cache-ttl \fIn\fR
Set the time a cache entry is valid to \fIn\fR seconds.  The default is
600 seconds.

.TP
.B  --default-cache-ttl-ssh \fIn\fR
Set the time a cache entry used for SSH keys is valid to \fIn\fR
seconds.  The default is 1800 seconds.

.TP
.B  --max-cache-ttl \fIn\fR
Set the maximum time a cache entry is valid to \fIn\fR seconds.  After
this time a cache entry will be expired even if it has been accessed
recently.  The default is 2 hours (7200 seconds).

.TP
.B  --max-cache-ttl-ssh \fIn\fR
Set the maximum time a cache entry used for SSH keys is valid to \fIn\fR
seconds.  After this time a cache entry will be expired even if it has
been accessed recently.  The default is 2 hours (7200 seconds).

.TP
.B  --enforce-passphrase-constraints
Enforce the passphrase constraints by not allowing the user to bypass
them using the ``Take it anyway'' button.

.TP
.B  --min-passphrase-len \fIn\fR
Set the minimal length of a passphrase.  When entering a new passphrase
shorter than this value a warning will be displayed.  Defaults to 8.

.TP
.B  --min-passphrase-nonalpha \fIn\fR
Set the minimal number of digits or special characters required in a
passphrase.  When entering a new passphrase with less than this number
of digits or special characters a warning will be displayed.  Defaults
to 1.

.TP
.B  --check-passphrase-pattern \fIfile\fR
Check the passphrase against the pattern given in \fIfile\fR.  When
entering a new passphrase matching one of these pattern a warning will
be displayed. \fIfile\fR should be an absolute filename.  The default is
not to use any pattern file. 

Security note: It is known that checking a passphrase against a list of
pattern or even against a complete dictionary is not very effective to
enforce good passphrases.  Users will soon figure up ways to bypass such
a policy.  A better policy is to educate users on good security
behavior and optionally to run a passphrase cracker regularly on all
users passphrases to catch the very simple ones.

.TP
.B  --max-passphrase-days \fIn\fR
Ask the user to change the passphrase if \fIn\fR days have passed since
the last change.  With \fB--enforce-passphrase-constraints\fR set the
user may not bypass this check.

.TP
.B  --enable-passphrase-history
This option does nothing yet.

.TP
.B  --pinentry-program \fIfilename\fR
Use program \fIfilename\fR as the PIN entry.  The default is installation
dependent and can be shown with the \fB--version\fR command.

.TP
.B  --pinentry-touch-file \fIfilename\fR
By default the filename of the socket gpg-agent is listening for
requests is passed to Pinentry, so that it can touch that file before
exiting (it does this only in curses mode).  This option changes the
file passed to Pinentry to \fIfilename\fR.  The special name
\fB/dev/null\fR may be used to completely disable this feature.  Note
that Pinentry will not create that file, it will only change the
modification and access time.


.TP
.B  --scdaemon-program \fIfilename\fR
Use program \fIfilename\fR as the Smartcard daemon.  The default is
installation dependent and can be shown with the \fB--version\fR
command.

.TP
.B  --disable-scdaemon
Do not make use of the scdaemon tool.  This option has the effect of
disabling the ability to do smartcard operations.  Note, that enabling
this option at runtime does not kill an already forked scdaemon.

.TP
.B  --use-standard-socket
.TP
.B  --no-use-standard-socket
By enabling this option \fBgpg-agent\fR will listen on the socket
named `\fIS.gpg-agent\fR', located in the home directory, and not create
a random socket below a temporary directory.  Tools connecting to
\fBgpg-agent\fR should first try to connect to the socket given in
environment variable \fIGPG_AGENT_INFO\fR and then fall back to this
socket.  This option may not be used if the home directory is mounted as
a remote file system.  Note, that \fB--use-standard-socket\fR is the
default on Windows systems.


.TP
.B  --display \fIstring\fR
.TP
.B  --ttyname \fIstring\fR
.TP
.B  --ttytype \fIstring\fR
.TP
.B  --lc-type \fIstring\fR
.TP
.B  --lc-messages \fIstring\fR
.TP
.B  --xauthority \fIstring\fR
These options are used with the server mode to pass localization
information.

.TP
.B  --keep-tty
.TP
.B  --keep-display
Ignore requests to change the current \fBtty\fR or X window system's
\fBDISPLAY\fR variable respectively.  This is useful to lock the
pinentry to pop up at the \fBtty\fR or display you started the agent.


.TP
.B  --enable-ssh-support

Enable emulation of the OpenSSH Agent protocol.

In this mode of operation, the agent does not only implement the
gpg-agent protocol, but also the agent protocol used by OpenSSH
(through a separate socket).  Consequently, it should be possible to use
the gpg-agent as a drop-in replacement for the well known ssh-agent.

SSH Keys, which are to be used through the agent, need to be added to
the gpg-agent initially through the ssh-add utility.  When a key is
added, ssh-add will ask for the password of the provided key file and
send the unprotected key material to the agent; this causes the
gpg-agent to ask for a passphrase, which is to be used for encrypting
the newly received key and storing it in a gpg-agent specific
directory.

Once a key has been added to the gpg-agent this way, the gpg-agent
will be ready to use the key.

Note: in case the gpg-agent receives a signature request, the user might
need to be prompted for a passphrase, which is necessary for decrypting
the stored key.  Since the ssh-agent protocol does not contain a
mechanism for telling the agent on which display/terminal it is running,
gpg-agent's ssh-support will use the TTY or X display where gpg-agent
has been started.  To switch this display to the current one, the
following command may be used:

.RS 2
.nf
echo UPDATESTARTUPTTY | gpg-connect-agent
.fi
.RE




All the long options may also be given in the configuration file after
stripping off the two leading dashes.


.SH EXAMPLES

The usual way to invoke \fBgpg-agent\fR is

.RS 2
.nf
$ eval `gpg-agent --daemon`
.fi
.RE

An alternative way is by replacing \fBssh-agent\fR with
\fBgpg-agent\fR.  If for example \fBssh-agent\fR is started as
part of the Xsession initialization, you may simply replace
\fBssh-agent\fR by a script like:

.RS 2
.nf
#!/bin/sh

exec /usr/local/bin/gpg-agent --enable-ssh-support --daemon \
      --write-env-file ${HOME}/.gpg-agent-info "$@"
.fi
.RE


and add something like (for Bourne shells)

.RS 2
.nf
  if [ -f "${HOME}/.gpg-agent-info" ]; then
    . "${HOME}/.gpg-agent-info"
    export GPG_AGENT_INFO
    export SSH_AUTH_SOCK
    export SSH_AGENT_PID
  fi
.fi
.RE


to your shell initialization file (e.g. `\fI~/.bashrc\fR').


.SH FILES

There are a few configuration files needed for the operation of the
agent. By default they may all be found in the current home directory
(see: [option --homedir]).


.TP
.B  gpg-agent.conf
  This is the standard configuration file read by \fBgpg-agent\fR on
  startup.  It may contain any valid long option; the leading
  two dashes may not be entered and the option may not be abbreviated.
  This file is also read after a \fBSIGHUP\fR however only a few
  options will actually have an effect.  This default name may be
  changed on the command line (see: [option --options]).

.TP
.B  trustlist.txt
  This is the list of trusted keys.  Comment lines, indicated by a leading
  hash mark, as well as empty lines are ignored.  To mark a key as trusted
  you need to enter its fingerprint followed by a space and a capital
  letter \fBS\fR.  Colons may optionally be used to separate the bytes of
  a fingerprint; this allows to cut and paste the fingerprint from a key
  listing output.
  
  Here is an example where two keys are marked as ultimately trusted:
  
  .RS 2
.nf
  # CN=Wurzel ZS 3,O=Intevation GmbH,C=DE
  A6935DD34EF3087973C706FC311AA2CCF733765B S
  
  # CN=PCA-1-Verwaltung-02/O=PKI-1-Verwaltung/C=DE
  DC:BD:69:25:48:BD:BB:7E:31:6E:BB:80:D3:00:80:35:D4:F8:A6:CD S 
  .fi
.RE
  
Before entering a key into this file, you need to ensure its
authenticity.  How to do this depends on your organisation; your
administrator might have already entered those keys which are deemed
trustworthy enough into this file.  Places where to look for the
fingerprint of a root certificate are letters received from the CA or
the website of the CA (after making 100% sure that this is indeed the
website of that CA).  You may want to consider allowing interactive
updates of this file by using the see: [option --allow-mark-trusted].
This is however not as secure as maintaining this file manually.  It is
even advisable to change the permissions to read-only so that this file
can't be changed inadvertently.

As a special feature a line \fBinclude-default\fR will include a global
list of trusted certificates (e.g. `\fI/etc/gnupg/trustlist.txt\fR').
This global list is also used if the local list is not available.

It is possible to add further flags after the \fBS\fR for use by the
caller:

.RS
.TP
.B  relax
Relax checking of some root certificate requirements.  This is for
example required if the certificate is missing the basicConstraints
attribute (despite that it is a MUST for CA certificates).

.TP
.B  cm
If validation of a certificate finally issued by a CA with this flag set
fails, try again using the chain validation model.

.RE

  
.TP
.B  sshcontrol

This file is used when support for the secure shell agent protocol has
been enabled (see: [option --enable-ssh-support]). Only keys present
in this file are used in the SSH protocol.  The \fBssh-add\fR tool
may be used to add new entries to this file; you may also add them
manually.  Comment lines, indicated by a leading hash mark, as well as
empty lines are ignored.  An entry starts with optional whitespace,
followed by the keygrip of the key given as 40 hex digits, optionally
followed by the caching TTL in seconds and another optional field for
arbitrary flags.  The keygrip may be prefixed with a \fB!\fR to
disable this entry.
    
The following example lists exactly one key.  Note that keys available
through a OpenPGP smartcard in the active smartcard reader are
implicitly added to this list; i.e. there is no need to list them.
  
  .RS 2
.nf
  # Key added on 2005-02-25 15:08:29
  5A6592BF45DC73BD876874A28FD4639282E29B52 0
  .fi
.RE

.TP
.B  private-keys-v1.d/

  This is the directory where gpg-agent stores the private keys.  Each
  key is stored in a file with the name made up of the keygrip and the
  suffix `\fIkey\fR'.



Note that on larger installations, it is useful to put predefined
files into the directory `\fI/etc/skel/.gnupg/\fR' so that newly created
users start up with a working configuration.  For existing users the
a small helper script is provided to create these files (see: [addgnupghome]).




.SH SIGNALS
A running \fBgpg-agent\fR may be controlled by signals, i.e. using
the \fBkill\fR command to send a signal to the process. 

Here is a list of supported signals:


.TP
.B  SIGHUP
This signal flushes all cached passphrases and if the program has been
started with a configuration file, the configuration file is read again.
Only certain options are honored: \fBquiet\fR, \fBverbose\fR,
\fBdebug\fR, \fBdebug-all\fR, \fBdebug-level\fR, \fBno-grab\fR,
\fBpinentry-program\fR, \fBdefault-cache-ttl\fR, \fBmax-cache-ttl\fR,
\fBignore-cache-for-signing\fR, \fBallow-mark-trusted\fR and
\fBdisable-scdaemon\fR.  \fBscdaemon-program\fR is also supported but
due to the current implementation, which calls the scdaemon only once,
it is not of much use unless you manually kill the scdaemon.


.TP
.B  SIGTERM
Shuts down the process but waits until all current requests are
fulfilled.  If the process has received 3 of these signals and requests
are still pending, a shutdown is forced.

.TP
.B  SIGINT
Shuts down the process immediately.

.TP
.B  SIGUSR1
Dump internal information to the log file.

.TP
.B  SIGUSR2
This signal is used for internal purposes.



.SH SEE ALSO
\fBgpg2\fR(1), 
\fBgpgsm\fR(1), 
\fBgpg-connect-agent\fR(1),
\fBscdaemon\fR(1)

The full documentation for this tool is maintained as a Texinfo manual.
If GnuPG and the info program are properly installed at your site, the
command

.RS 2
.nf
info gnupg
.fi
.RE

should give you access to the complete manual including a menu structure
and an index.
